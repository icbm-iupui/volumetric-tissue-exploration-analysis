/* 
 * Copyright (C) 2020 Indiana University
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package vtea;

import com.formdev.flatlaf.FlatLightLaf;
import ij.IJ;
import ij.ImageJ;
import ij.ImagePlus;
import ij.WindowManager;
import ij.plugin.Duplicator;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import vteaexploration.MicroExplorer;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author vinfrais
 */
public class OpenImageWindow extends javax.swing.JFrame {

    private int tab;

    /**
     * Creates new form microWindowManager
     */
    public OpenImageWindow(javax.swing.JList images) {


        
        OpenImages = images;

        GuiSetup();
        initComponents();
        
                                try {
            UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MicroExplorer.class.getName()).log(Level.SEVERE, null, ex);
        }
        SwingUtilities.updateComponentTreeUI(this);
        this.pack();

        this.getRootPane().setDefaultButton(this.SelectImage);

        comment.setVisible(false);

        //plotNames[0] = "NO PLOTS CREATED"; 
        //analysisNames[0] = "NO ANALYSES";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        OpenImages = new javax.swing.JList();
        SelectImage = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        comment = new javax.swing.JLabel();

        setTitle("Select Image");
        setBackground(vtea._vtea.BACKGROUND);
        setIconImages(null);
        setLocation(new java.awt.Point(130, 180));
        setMinimumSize(new java.awt.Dimension(217, 320));
        setName("microWindowManager"); // NOI18N
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        Panel.setBackground(vtea._vtea.BACKGROUND);
        Panel.setMaximumSize(new java.awt.Dimension(305, 180));
        Panel.setMinimumSize(new java.awt.Dimension(305, 180));
        Panel.setPreferredSize(new java.awt.Dimension(305, 180));

        OpenImages.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        OpenImages.setModel(new javax.swing.AbstractListModel() {
            String[] strings = populateImages();
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        }
    );
    OpenImages.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    OpenImages.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            OpenImagesValueChanged(evt);
        }
    });
    jScrollPane10.setViewportView(OpenImages);

    SelectImage.setText("Select");
    SelectImage.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 255), 2, true));
    SelectImage.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    SelectImage.setEnabled(false);
    SelectImage.setMaximumSize(new java.awt.Dimension(100, 35));
    SelectImage.setMinimumSize(new java.awt.Dimension(100, 35));
    SelectImage.setPreferredSize(new java.awt.Dimension(100, 35));
    SelectImage.setRequestFocusEnabled(false);
    SelectImage.setSize(new java.awt.Dimension(100, 35));
    SelectImage.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            SelectImageActionPerformed(evt);
        }
    });

    comment.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
    comment.setText("Loading");

    javax.swing.GroupLayout PanelLayout = new javax.swing.GroupLayout(Panel);
    Panel.setLayout(PanelLayout);
    PanelLayout.setHorizontalGroup(
        PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(PanelLayout.createSequentialGroup()
            .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(PanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(comment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(SelectImage, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jSeparator1)))
            .addGap(0, 0, Short.MAX_VALUE))
    );
    PanelLayout.setVerticalGroup(
        PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(PanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(SelectImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(comment))
            .addGap(1, 1, 1)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(6, 6, 6)
            .addComponent(Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 201, Short.MAX_VALUE)
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(Panel, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SelectImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectImageActionPerformed
        ListActionPerformed(evt);
    }//GEN-LAST:event_SelectImageActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void OpenImagesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_OpenImagesValueChanged
        if (!OpenImages.isSelectionEmpty() && WindowManager.getImageCount() > 0) {
            this.SelectImage.setEnabled(true);
        } else {
            this.SelectImage.setEnabled(false);
        }
    }//GEN-LAST:event_OpenImagesValueChanged

    protected void ListActionPerformed(ActionEvent evt) {
        new Thread(() -> {
            try {
                comment.setText("Loading...");
                comment.setVisible(true);
                openImage();
                comment.setText("Done.");
                comment.setVisible(false);
            } catch (Exception e) {
                System.out.println("ERROR: " + e.getLocalizedMessage());
            }
        }).start();
    }

    protected void openImage() {
        try {
            int i = OpenImages.getSelectedIndex();
            notifyImageSelectionListeners(i, this.tab);
            this.setVisible(false);
        } catch (NullPointerException e) {
        }
    }

    protected String[] populateImages() {
        int[] windowList = WindowManager.getIDList();

        if (windowList == null) {
            String[] titles = new String[1];
            titles[0] = "NO OPEN IMAGES";
            //IJ.log("NO IMAGES...  :(");
            return titles;
        }

        String[] titles = new String[windowList.length];

        for (int i = 0; i < windowList.length; i++) {
            ImagePlus imp_temp = WindowManager.getImage(windowList[i]);
            if (!imp_temp.getTitle().contains("Plot")) {
                titles[i] = imp_temp != null ? imp_temp.getTitle() : "";
            }
        }
        return titles;
    }

    public void updateImages() {
        OpenImages.setModel(new javax.swing.AbstractListModel() {
            String[] strings = populateImages();

            @Override
            public int getSize() {
                return strings.length;
            }

            @Override
            public Object getElementAt(int i) {
                return strings[i];
            }
        });
    }

    private ImagePlus getSelectedImagePlus() {
        int i = OpenImages.getSelectedIndex();
        return new Duplicator().run(WindowManager.getImage(i + 1));
    }

    private Color getBackgroundColor() {

        return ImageJ.backgroundColor;
    }

//Analyze button events
    public void addImageSelectionListener(ImageSelectionListener listener) {
        listeners.add(listener);
    }

    private void notifyImageSelectionListeners(int i, int tab) {
if(WindowManager.getImage(i + 1).getNFrames() > 1){
                JFrame frame = new JFrame();
                frame.setBackground(vtea._vtea.BUTTONBACKGROUND);  

                    JOptionPane.showMessageDialog(frame,
                    "Sorry, VTEA requires a single timepoint.  Please adjust the "
                            + "\n image dimensions with Image>Hyperstack>Reorder Hyperstack...",
                        "File type warning",
                    JOptionPane.WARNING_MESSAGE);
        
       } else{

        for (ImageSelectionListener listener : listeners) {

            Duplicator dup = new Duplicator();
            ImagePlus imp = dup.run(WindowManager.getImage(i + 1));
            if (imp.getType() == ImagePlus.COLOR_RGB) {
                IJ.run("Make Composite", "");
            }
            listener.onSelect(imp, tab);
        }
        }
    }

    public void getImageFile(int i) {
        this.setVisible(true);
        this.tab = i;
    }

    //analysis table and plot table update events
    /**
     *
     * @param result
     */
    //   public void onUpdatePlots(DefaultListModel result){IJ.log("Updating plot lists.."); this.plots = result; OpenPlots.setModel(plots);}
    /**
     *
     * @param result
     */
    //    @Override
    //   public void onUpdateAnalysis(DefaultListModel result){IJ.log("Updating analysis lists.."); this.analysis = result; //Analyses.setModel(analysis);
    //   }
    /**
     * @param result
     */
    private void GuiSetup() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    //javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");

                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OpenImageWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OpenImageWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OpenImageWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OpenImageWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                //new microWindowManager().setVisible(true);
            }
        });

    }

    private DefaultListModel plots = new DefaultListModel();
    private DefaultListModel analysis = new DefaultListModel();

    protected ArrayList<ImageSelectionListener> listeners = new ArrayList<ImageSelectionListener>();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JList OpenImages;
    private javax.swing.JPanel Panel;
    protected javax.swing.JButton SelectImage;
    protected javax.swing.JLabel comment;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
