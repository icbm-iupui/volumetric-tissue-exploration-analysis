/* 
 * Copyright (C) 2020 Indiana University
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package vtea.protocol.setup;

import ij.ImagePlus;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import vtea.protocol.listeners.MicroBlockSetupListener;

/**
 *
 * @author winfrees
 */
public class MicroBlockSetup extends javax.swing.JFrame implements Cloneable {

    private String[] ProcessOptions = {"", "", ""};

    protected ArrayList<String> Channels = new ArrayList<String>();

    protected DefaultComboBoxModel processComboBox;
    protected DefaultComboBoxModel channelsComboBox;
    public ArrayList<MicroBlockSetupListener> MicroBlockSetupListeners = new ArrayList<MicroBlockSetupListener>();
    protected ArrayList CurrentStepProtocol = new ArrayList();
    protected int step;
    protected ArrayList<ArrayList> protocolAll = new ArrayList<ArrayList>();
    java.awt.GridBagLayout MethodSelectionLayout = new java.awt.GridBagLayout();

    /**
     * 'CurrentStepProtocol' contains an array of objects for the current
     * protocol, Process Channel or image selection Components for specific
     * plugin or process
     */
    private JPanel[] SetupPanes = new JPanel[3];
    private String CurrentProtocol = new String();
    private int CurrentProcess = 0;

    protected String DefaultTitle;

    protected ArrayList CurrentProcessList;
    protected ArrayList<ArrayList> CurrentProcessItems = new ArrayList<ArrayList>();

    protected String[][] ProcessVariables = {{"750", "5", "20", "1000"}, {"750", "4095", "20", "1000"}};

    /**
     * Creates new form MicroBlockSetup
     *
     * @param step
     */
    MicroBlockSetup() {

    }

    MicroBlockSetup(int step, ArrayList channel) {

        Channels = channel;

        this.step = step;

        for (int i = 0; i < 10; i++) {
            CurrentProcessItems.add(null);
        }

        DefaultTitle = "BlockStep_" + step;
        channelsComboBox = new DefaultComboBoxModel(Channels.toArray());
        processComboBox = new DefaultComboBoxModel(ProcessOptions);
        CurrentProcessList = new ArrayList(10);
        initComponents();
        ChannelComboBox.setVisible(true);
        PreviewButton.setVisible(false);
        pack();
    }

    MicroBlockSetup(int step) {
        this.step = step;
        for (int i = 0; i < 10; i++) {
            CurrentProcessItems.add(null);
        }
        DefaultTitle = "BlockStep_" + step;
        processComboBox = new DefaultComboBoxModel(ProcessOptions);
        channelsComboBox = new DefaultComboBoxModel(ProcessOptions);
        CurrentProcessList = new ArrayList(10);
        initComponents();
        ChannelComboBox.setVisible(true);
        PreviewButton.setVisible(false);
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel3 = new javax.swing.JLabel();
        methodSelection = new javax.swing.JPanel();
        TitleText = new javax.swing.JTextField();
        PositionText = new javax.swing.JLabel();
        methodBuild = new javax.swing.JPanel();
        AlgorithmStyle = new javax.swing.JPanel();
        comments = new javax.swing.JPanel();
        notesPane = new javax.swing.JPanel();
        ProcessNotes = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        buttonPanel = new javax.swing.JPanel();
        PreviewProgress = new javax.swing.JLabel();
        PreviewButton = new javax.swing.JButton();
        BlockSetupCancel = new javax.swing.JButton();
        BlockSetupOK = new javax.swing.JButton();
        channelSelection = new javax.swing.JPanel();
        ProcessText = new javax.swing.JLabel();
        ProcessSelectComboBox = new javax.swing.JComboBox();
        ApproachPanel = new javax.swing.JPanel();
        ChannelSelection = new javax.swing.JLabel();
        ChannelComboBox = new javax.swing.JComboBox();
        methodMorphology = new javax.swing.JPanel();
        MethodDetails = new javax.swing.JPanel();

        jLabel3.setText("Notes");
        jLabel3.setAlignmentX(0.5F);

        setTitle("Setup");
        setBackground(vtea._vtea.BACKGROUND);
        setBounds(new java.awt.Rectangle(110, 160, 800, 400));
        setMaximumSize(new java.awt.Dimension(390, 730));
        setMinimumSize(new java.awt.Dimension(390, 730));
        setName("BlockOptionFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(390, 730));
        setSize(new java.awt.Dimension(390, 720));
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0};
        layout.rowHeights = new int[] {0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0};
        getContentPane().setLayout(layout);

        methodSelection.setBackground(vtea._vtea.BACKGROUND);
        methodSelection.setMaximumSize(new java.awt.Dimension(359, 40));
        methodSelection.setMinimumSize(new java.awt.Dimension(359, 40));
        methodSelection.setPreferredSize(new java.awt.Dimension(359, 40));
        methodSelection.setLayout(new java.awt.GridBagLayout());

        TitleText.setEditable(false);
        TitleText.setBackground(vtea._vtea.BACKGROUND);
        TitleText.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        TitleText.setText("Processing");
        TitleText.setBorder(null);
        TitleText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TitleTextFocusLost(evt);
            }
        });
        TitleText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TitleTextActionPerformed(evt);
            }
        });
        TitleText.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                TitleTextPropertyChange(evt);
            }
        });
        TitleText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TitleTextKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        methodSelection.add(TitleText, gridBagConstraints);

        PositionText.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        PositionText.setText(" ");
        PositionText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                PositionTextMousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        methodSelection.add(PositionText, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        getContentPane().add(methodSelection, gridBagConstraints);

        methodBuild.setMaximumSize(new java.awt.Dimension(370, 330));
        methodBuild.setMinimumSize(new java.awt.Dimension(370, 330));
        methodBuild.setPreferredSize(new java.awt.Dimension(370, 330));
        methodBuild.setSize(new java.awt.Dimension(370, 330));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(methodBuild, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        getContentPane().add(AlgorithmStyle, gridBagConstraints);

        comments.setMaximumSize(new java.awt.Dimension(359, 50));
        comments.setMinimumSize(new java.awt.Dimension(359, 50));
        comments.setPreferredSize(new java.awt.Dimension(359, 50));

        notesPane.setBackground(vtea._vtea.BACKGROUND);
        notesPane.setMaximumSize(new java.awt.Dimension(360, 50));
        notesPane.setMinimumSize(new java.awt.Dimension(360, 50));
        notesPane.setPreferredSize(new java.awt.Dimension(360, 50));
        notesPane.setLayout(new java.awt.GridBagLayout());

        ProcessNotes.setBorder(null);
        ProcessNotes.setMaximumSize(new java.awt.Dimension(358, 45));
        ProcessNotes.setMinimumSize(new java.awt.Dimension(358, 45));
        ProcessNotes.setName(""); // NOI18N
        ProcessNotes.setPreferredSize(new java.awt.Dimension(358, 45));
        ProcessNotes.setViewportView(null);

        jTextPane1.setBorder(null);
        jTextPane1.setText("Enter notes here...");
        jTextPane1.setToolTipText("Enter notes here...");
        jTextPane1.setMaximumSize(new java.awt.Dimension(358, 300));
        jTextPane1.setMinimumSize(new java.awt.Dimension(358, 300));
        jTextPane1.setPreferredSize(new java.awt.Dimension(358, 300));
        ProcessNotes.setViewportView(jTextPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.BASELINE;
        notesPane.add(ProcessNotes, gridBagConstraints);

        comments.add(notesPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 19;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        getContentPane().add(comments, gridBagConstraints);

        buttonPanel.setMaximumSize(new java.awt.Dimension(359, 50));
        buttonPanel.setMinimumSize(new java.awt.Dimension(359, 50));
        buttonPanel.setPreferredSize(new java.awt.Dimension(359, 50));
        buttonPanel.setLayout(new java.awt.GridBagLayout());

        PreviewProgress.setBackground(vtea._vtea.BACKGROUND);
        PreviewProgress.setMaximumSize(new java.awt.Dimension(250, 30));
        PreviewProgress.setMinimumSize(new java.awt.Dimension(250, 30));
        PreviewProgress.setPreferredSize(new java.awt.Dimension(250, 30));
        PreviewProgress.setRequestFocusEnabled(false);
        PreviewProgress.setSize(new java.awt.Dimension(250, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        buttonPanel.add(PreviewProgress, gridBagConstraints);

        PreviewButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/eye.png"))); // NOI18N
        PreviewButton.setToolTipText("Preview Segmentation");
        PreviewButton.setMaximumSize(vtea._vtea.SMALLBUTTONSIZE);
        PreviewButton.setMinimumSize(vtea._vtea.SMALLBUTTONSIZE);
        PreviewButton.setPreferredSize(vtea._vtea.SMALLBUTTONSIZE);
        PreviewButton.setSize(vtea._vtea.SMALLBUTTONSIZE);
        PreviewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PreviewButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        buttonPanel.add(PreviewButton, gridBagConstraints);

        BlockSetupCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit-delete-6_24.png"))); // NOI18N
        BlockSetupCancel.setToolTipText("Cancel changes");
        BlockSetupCancel.setMaximumSize(vtea._vtea.SMALLBUTTONSIZE);
        BlockSetupCancel.setMinimumSize(vtea._vtea.SMALLBUTTONSIZE);
        BlockSetupCancel.setPreferredSize(vtea._vtea.SMALLBUTTONSIZE);
        BlockSetupCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlockSetupCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        buttonPanel.add(BlockSetupCancel, gridBagConstraints);

        BlockSetupOK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/dialog-apply.png"))); // NOI18N
        BlockSetupOK.setToolTipText("Accept changes");
        BlockSetupOK.setMaximumSize(vtea._vtea.SMALLBUTTONSIZE);
        BlockSetupOK.setMinimumSize(vtea._vtea.SMALLBUTTONSIZE);
        BlockSetupOK.setPreferredSize(vtea._vtea.SMALLBUTTONSIZE);
        BlockSetupOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlockSetupOKActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        buttonPanel.add(BlockSetupOK, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        getContentPane().add(buttonPanel, gridBagConstraints);

        channelSelection.setBackground(vtea._vtea.BACKGROUND);
        channelSelection.setMaximumSize(new java.awt.Dimension(359, 41));
        channelSelection.setMinimumSize(new java.awt.Dimension(359, 41));
        channelSelection.setPreferredSize(new java.awt.Dimension(359, 41));
        channelSelection.setRequestFocusEnabled(false);
        channelSelection.setSize(new java.awt.Dimension(359, 41));
        channelSelection.setLayout(new java.awt.GridBagLayout());

        ProcessText.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        ProcessText.setText("Object formation ");
        ProcessText.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 0);
        channelSelection.add(ProcessText, gridBagConstraints);

        ProcessSelectComboBox.setMaximumSize(new java.awt.Dimension(200, 27));
        ProcessSelectComboBox.setMinimumSize(new java.awt.Dimension(200, 27));
        ProcessSelectComboBox.setPreferredSize(new java.awt.Dimension(200, 27));
        ProcessSelectComboBox.setSize(new java.awt.Dimension(200, 27));
        ProcessSelectComboBox.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                ProcessSelectComboBoxCaretPositionChanged(evt);
            }
        });
        ProcessSelectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcessSelectComboBoxActionPerformed(evt);
            }
        });
        channelSelection.add(ProcessSelectComboBox, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(channelSelection, gridBagConstraints);

        ApproachPanel.setBackground(vtea._vtea.BACKGROUND);
        ApproachPanel.setMaximumSize(new java.awt.Dimension(359, 41));
        ApproachPanel.setMinimumSize(new java.awt.Dimension(359, 41));
        ApproachPanel.setPreferredSize(new java.awt.Dimension(359, 41));
        ApproachPanel.setSize(new java.awt.Dimension(359, 41));

        ChannelSelection.setFont(new java.awt.Font("Helvetica", 0, 18)); // NOI18N
        ChannelSelection.setText("Segment on Channel");
        ApproachPanel.add(ChannelSelection);

        ChannelComboBox.setModel(channelsComboBox);
        ChannelComboBox.setMaximumSize(new java.awt.Dimension(52, 27));
        ChannelComboBox.setSize(new java.awt.Dimension(52, 27));
        ChannelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChannelComboBoxActionPerformed(evt);
            }
        });
        ApproachPanel.add(ChannelComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(ApproachPanel, gridBagConstraints);

        methodMorphology.setMaximumSize(new java.awt.Dimension(359, 500));
        methodMorphology.setMinimumSize(new java.awt.Dimension(359, 150));
        methodMorphology.setPreferredSize(new java.awt.Dimension(359, 150));
        methodMorphology.setRequestFocusEnabled(false);

        defaultProtocolPanel();
        MethodDetails.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        MethodDetails.setMaximumSize(new java.awt.Dimension(340, 500));
        MethodDetails.setMinimumSize(new java.awt.Dimension(340, 120));
        MethodDetails.setName(""); // NOI18N
        MethodDetails.setPreferredSize(new java.awt.Dimension(350, 120));
        MethodDetails.setLayout(new java.awt.GridBagLayout());
        methodMorphology.add(MethodDetails);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(methodMorphology, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ProcessSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcessSelectComboBoxActionPerformed
        updateProtocolPanel(evt);
    }//GEN-LAST:event_ProcessSelectComboBoxActionPerformed

    private void BlockSetupCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlockSetupCancelActionPerformed

        this.setVisible(false);
    }//GEN-LAST:event_BlockSetupCancelActionPerformed

    private void BlockSetupOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlockSetupOKActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        blockSetupOKAction();

    }//GEN-LAST:event_BlockSetupOKActionPerformed

    private void ProcessSelectComboBoxCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_ProcessSelectComboBoxCaretPositionChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_ProcessSelectComboBoxCaretPositionChanged

    private void ChannelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChannelComboBoxActionPerformed
        updateProtocolPanel(evt);
    }//GEN-LAST:event_ChannelComboBoxActionPerformed

    private void PositionTextMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PositionTextMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_PositionTextMousePressed

    private void TitleTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TitleTextKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TitleTextKeyPressed

    private void TitleTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TitleTextFocusLost
        if (TitleText.getText().length() == 0) {
            TitleText.setText(DefaultTitle);
        } else {

        }
        updateTitles();
        pack();
    }//GEN-LAST:event_TitleTextFocusLost

    private void TitleTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TitleTextActionPerformed
        this.updateProtocolPanel(evt);
    }//GEN-LAST:event_TitleTextActionPerformed

    private void TitleTextPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_TitleTextPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_TitleTextPropertyChange

    private void PreviewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PreviewButtonActionPerformed
        this.PreviewProgress.setText("Getting segmentation preview...");

        getSegmentationPreview();

    }//GEN-LAST:event_PreviewButtonActionPerformed

    protected void getSegmentationPreview() {

    }

    public int getProtocolPosition() {
        return ProcessSelectComboBox.getSelectedIndex();
    }

    public void setProtocolPosition(int i) {
        ProcessSelectComboBox.setSelectedIndex(i);
    }

    public void addMicroBlockSetupListener(MicroBlockSetupListener listener) {
        MicroBlockSetupListeners.add(listener);
    }

    protected void notifyMicroBlockSetupListeners(ArrayList al) {
        for (MicroBlockSetupListener listener : MicroBlockSetupListeners) {
            listener.onChangeSetup(al);
        }
    }

    protected ArrayList makeMethodComponentsArray(int position, String[][] values) {

        ArrayList result = new ArrayList();

        return result;
    }

    protected ArrayList makeMethodComponentsArray(String method, String[][] str) {
        ArrayList result = new ArrayList();

        return result;
    }

    protected ArrayList makeSecondaryComponentsArray(int position) {

        ArrayList result = new ArrayList();

        return result;
    }

    private JPanel defaultProtocolPanel() {
        return new JPanel();
    }

    public void cloneProcessList(String str, ArrayList al) {

    }

    protected JPanel makeProtocolPanel(String str) {
        JPanel BuiltPanel = new JPanel();
        return BuiltPanel;
    }

    protected JPanel makeProtocolPanel(int position) {

        JPanel BuiltPanel = new JPanel();
        ArrayList ProcessComponents = new ArrayList();

        ProcessComponents = makeMethodComponentsArray(position, ProcessVariables);

        MethodDetails.setVisible(false);
        MethodDetails.removeAll();

        BuiltPanel.setLayout(new GridBagLayout());
        GridBagConstraints layoutConstraints = new GridBagConstraints();

        //MethodDetail
        if (ProcessComponents.size() > 0) {
            layoutConstraints.fill = GridBagConstraints.CENTER;
            layoutConstraints.gridx = 0;
            layoutConstraints.gridy = 0;
            layoutConstraints.weightx = 1;
            layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(0), layoutConstraints);
        }

        if (ProcessComponents.size() > 1) {
            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 1;
            layoutConstraints.gridy = 0;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(1), layoutConstraints);
        }

        if (ProcessComponents.size() > 2) {
            layoutConstraints.fill = GridBagConstraints.CENTER;
            layoutConstraints.gridx = 2;
            layoutConstraints.gridy = 0;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(2), layoutConstraints);
        }
        if (ProcessComponents.size() > 3) {
            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 3;
            layoutConstraints.gridy = 0;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(3), layoutConstraints);
        }
        if (ProcessComponents.size() > 4) {
            layoutConstraints.fill = GridBagConstraints.CENTER;
            layoutConstraints.gridx = 0;
            layoutConstraints.gridy = 1;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(4), layoutConstraints);
        }
        if (ProcessComponents.size() > 5) {
            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 1;
            layoutConstraints.gridy = 1;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(5), layoutConstraints);
        }
        if (ProcessComponents.size() > 6) {
            layoutConstraints.fill = GridBagConstraints.CENTER;
            layoutConstraints.gridx = 2;
            layoutConstraints.gridy = 1;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(6), layoutConstraints);
        }
        if (ProcessComponents.size() > 7) {
            layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
            layoutConstraints.gridx = 3;
            layoutConstraints.gridy = 1;
            //layoutConstraints.weightx = 1;
            //layoutConstraints.weighty = 1;
            MethodDetails.add((Component) ProcessComponents.get(7), layoutConstraints);
        }
        //MethodDetails.setSize(VTEAService.BLOCKSETUPPANEL);
//                layoutConstraints.fill = GridBagConstraints.BOTH;
//        layoutConstraints.gridx = 2;
//        layoutConstraints.gridy = 0;
//        layoutConstraints.weightx = -1;
//        layoutConstraints.weighty = -1;
//        layoutConstraints.ipadx = -1;
//        layoutConstraints.ipady = -1;
//        step.add(DeleteButton,layoutConstraints);
//                        layoutConstraints.fill = GridBagConstraints.BOTH;
//        layoutConstraints.gridx = 2;
//        layoutConstraints.gridy = 1;
//        layoutConstraints.weightx = -1;
//        layoutConstraints.weighty = -1;
//        layoutConstraints.ipadx = -1;
//        layoutConstraints.ipady = -1;
//        step.add(EditButton,layoutConstraints);

        pack();
        MethodDetails.setVisible(true);

        if (!(null == this.CurrentProcessList)) {
            this.CurrentProcessList.clear();
        }
        this.CurrentProcessList.add(this.processComboBox.getSelectedItem());
        this.CurrentProcessList.add(this.channelsComboBox.getSelectedItem());
        //this.CurrentProcessList.add(this.jTextPane1.getText());
        this.CurrentProcessList.addAll(ProcessComponents);

        return MethodDetails;
    }

    protected void blockSetupOKAction() {

        this.CurrentStepProtocol = CurrentProcessList;
        notifyMicroBlockSetupListeners(this.CurrentStepProtocol);

    }

    protected void blockSetupCancelAction() {

    }

    public ArrayList getProcessList() {
        return CurrentProcessList;
    }

    protected void setImage(ImagePlus imp) {
    }

    protected void updateTitles() {
    }

    protected void updateProtocolPanel(ActionEvent evt) {

        MethodDetails.setVisible(false);
        MethodDetails.removeAll();

        makeProtocolPanel((String) ProcessSelectComboBox.getSelectedItem());

        MethodDetails.revalidate();
        MethodDetails.repaint();
        MethodDetails.setVisible(true);

        pack();

    }

    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone(); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getTitle() {
        return this.TitleText.getText();
    }

    @Override
    public void setTitle(String title) {
        TitleText.setText(title);
    }

    public void setChannel(int position) {
        this.ChannelComboBox.setSelectedIndex(position);
    }

    public void setMethod(String str) {
        this.ProcessSelectComboBox.setSelectedItem(str);

    }

    public String getMethod() {
        return (String) ProcessSelectComboBox.getSelectedItem();
    }

    public int getChannel() {
        return this.ChannelComboBox.getSelectedIndex();
    }

    public void setSetup(ArrayList ProcessComponents) {
        try {

            MethodDetails.setVisible(false);
            MethodDetails.removeAll();

            //BuiltPanel.setLayout(new GridBagLayout());
            GridBagConstraints layoutConstraints = new GridBagConstraints();

            //MethodDetail
            if (ProcessComponents.size() > 0) {
                layoutConstraints.fill = GridBagConstraints.CENTER;
                layoutConstraints.gridx = 0;
                layoutConstraints.gridy = 0;
                layoutConstraints.weightx = 1;
                layoutConstraints.weighty = 1;
                MethodDetails.add((Component) ProcessComponents.get(0), layoutConstraints);
            }

            if (ProcessComponents.size() > 1) {
                layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
                layoutConstraints.gridx = 1;
                layoutConstraints.gridy = 0;
                MethodDetails.add((Component) ProcessComponents.get(1), layoutConstraints);
            }

            if (ProcessComponents.size() > 2) {
                layoutConstraints.fill = GridBagConstraints.CENTER;
                layoutConstraints.gridx = 2;
                layoutConstraints.gridy = 0;
                MethodDetails.add((Component) ProcessComponents.get(2), layoutConstraints);
            }
            if (ProcessComponents.size() > 3) {
                layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
                layoutConstraints.gridx = 3;
                layoutConstraints.gridy = 0;
                MethodDetails.add((Component) ProcessComponents.get(3), layoutConstraints);
            }
            if (ProcessComponents.size() > 4) {
                layoutConstraints.fill = GridBagConstraints.CENTER;
                layoutConstraints.gridx = 0;
                layoutConstraints.gridy = 1;
                MethodDetails.add((Component) ProcessComponents.get(4), layoutConstraints);
            }
            if (ProcessComponents.size() > 5) {
                layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
                layoutConstraints.gridx = 1;
                layoutConstraints.gridy = 1;
                MethodDetails.add((Component) ProcessComponents.get(5), layoutConstraints);
            }
            if (ProcessComponents.size() > 6) {
                layoutConstraints.fill = GridBagConstraints.CENTER;
                layoutConstraints.gridx = 2;
                layoutConstraints.gridy = 1;
                MethodDetails.add((Component) ProcessComponents.get(6), layoutConstraints);
            }
            if (ProcessComponents.size() > 7) {
                layoutConstraints.fill = GridBagConstraints.HORIZONTAL;
                layoutConstraints.gridx = 3;
                layoutConstraints.gridy = 1;
                MethodDetails.add((Component) ProcessComponents.get(7), layoutConstraints);
            }

            pack();
            MethodDetails.setVisible(true);

            CurrentProcessList.clear();

            CurrentProcessList.add(processComboBox.getSelectedItem());
            CurrentProcessList.add(channelsComboBox.getIndexOf(channelsComboBox.getSelectedItem()));
            CurrentProcessList.addAll(ProcessComponents);

        } catch (Exception e) {
        }

    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MicroBlockSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MicroBlockSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MicroBlockSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MicroBlockSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MicroBlockSetup().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AlgorithmStyle;
    protected javax.swing.JPanel ApproachPanel;
    protected javax.swing.JButton BlockSetupCancel;
    protected javax.swing.JButton BlockSetupOK;
    protected javax.swing.JComboBox ChannelComboBox;
    protected javax.swing.JLabel ChannelSelection;
    protected javax.swing.JPanel MethodDetails;
    protected javax.swing.JLabel PositionText;
    public javax.swing.JButton PreviewButton;
    public javax.swing.JLabel PreviewProgress;
    private javax.swing.JScrollPane ProcessNotes;
    protected javax.swing.JComboBox ProcessSelectComboBox;
    protected javax.swing.JLabel ProcessText;
    protected javax.swing.JTextField TitleText;
    public javax.swing.JPanel buttonPanel;
    protected javax.swing.JPanel channelSelection;
    protected javax.swing.JPanel comments;
    protected javax.swing.JLabel jLabel3;
    protected javax.swing.JTextPane jTextPane1;
    protected javax.swing.JPanel methodBuild;
    protected javax.swing.JPanel methodMorphology;
    protected javax.swing.JPanel methodSelection;
    protected javax.swing.JPanel notesPane;
    // End of variables declaration//GEN-END:variables

}
