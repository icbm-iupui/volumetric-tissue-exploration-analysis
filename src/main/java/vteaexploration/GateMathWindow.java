/*
 * Copyright (C) 2021 SciJava
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package vteaexploration;

import ij.gui.Roi;
import ij.plugin.frame.RoiManager;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableColumn;
import org.apache.commons.io.FilenameUtils;
import vtea._vtea;
import static vtea._vtea.GATEMATHOPTIONS;
import vtea.exploration.listeners.AddClassByMathListener;
import vtea.exploration.plotgatetools.gates.PolygonGate;

/**
 *
 * @author sethwinfree
 */
public class GateMathWindow extends javax.swing.JFrame implements TableModelListener {

    ArrayList<MicroExplorer> subgated = new ArrayList<>();
    String parentName = "untitled";
    String[] operations = {"AND", "OR", "XOR", ""};
    
    Boolean importing = false;

    ArrayList<String> gateNames = new ArrayList<>();
    ArrayList<String> opNames = new ArrayList<>();

    ArrayList<AddClassByMathListener> MathListeners = new ArrayList<AddClassByMathListener>();

    /**
     * Creates new form GatingHierarchy
     */
    public GateMathWindow(ArrayList<PolygonGate> gates) {
        initComponents();
        this.LoadStrategy.setVisible(false);
        this.saveStrategy.setVisible(false);
        updateTable(gates);
    }

    public void addMicroExplorer(MicroExplorer me) {
        subgated.add(me);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane = new javax.swing.JScrollPane();
        GateMathTable = new javax.swing.JTable();
        classPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        classSpinner = new javax.swing.JSpinner();
        LoadStrategy = new javax.swing.JButton();
        saveStrategy = new javax.swing.JButton();
        ButtonPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        Cancel = new javax.swing.JButton();
        Calculate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gating Strategy Math");
        setAlwaysOnTop(true);
        setMaximumSize(new java.awt.Dimension(400, 300));
        setMinimumSize(new java.awt.Dimension(400, 300));
        setPreferredSize(new java.awt.Dimension(400, 300));

        GateMathTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane.setViewportView(GateMathTable);

        getContentPane().add(jScrollPane, java.awt.BorderLayout.CENTER);

        classPanel.setMaximumSize(new java.awt.Dimension(400, 32));
        classPanel.setMinimumSize(new java.awt.Dimension(400, 32));
        classPanel.setPreferredSize(new java.awt.Dimension(400, 32));
        classPanel.setLayout(new java.awt.GridBagLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Add to class");
        jLabel1.setMaximumSize(new java.awt.Dimension(220, 16));
        jLabel1.setMinimumSize(new java.awt.Dimension(220, 16));
        jLabel1.setPreferredSize(new java.awt.Dimension(220, 16));
        jLabel1.setSize(new java.awt.Dimension(220, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        classPanel.add(jLabel1, gridBagConstraints);

        classSpinner.setModel(new SpinnerNumberModel(0, -1, 100, 1));
        classSpinner.setMaximumSize(new java.awt.Dimension(80, 27));
        classSpinner.setMinimumSize(new java.awt.Dimension(80, 27));
        classSpinner.setPreferredSize(new java.awt.Dimension(80, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        classPanel.add(classSpinner, gridBagConstraints);

        LoadStrategy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document-open-folder_24.png"))); // NOI18N
        LoadStrategy.setToolTipText("Load gates...");
        LoadStrategy.setFocusable(false);
        LoadStrategy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        LoadStrategy.setMaximumSize(new java.awt.Dimension(35, 40));
        LoadStrategy.setMinimumSize(new java.awt.Dimension(35, 40));
        LoadStrategy.setName(""); // NOI18N
        LoadStrategy.setPreferredSize(new java.awt.Dimension(35, 40));
        LoadStrategy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        LoadStrategy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadStrategyActionPerformed(evt);
            }
        });
        classPanel.add(LoadStrategy, new java.awt.GridBagConstraints());

        saveStrategy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/document-save-2_24.png"))); // NOI18N
        saveStrategy.setToolTipText("Save gates...");
        saveStrategy.setFocusable(false);
        saveStrategy.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveStrategy.setMaximumSize(new java.awt.Dimension(35, 40));
        saveStrategy.setMinimumSize(new java.awt.Dimension(35, 40));
        saveStrategy.setName(""); // NOI18N
        saveStrategy.setPreferredSize(new java.awt.Dimension(35, 40));
        saveStrategy.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveStrategy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveStrategyActionPerformed(evt);
            }
        });
        classPanel.add(saveStrategy, new java.awt.GridBagConstraints());

        getContentPane().add(classPanel, java.awt.BorderLayout.PAGE_START);

        ButtonPanel.setMaximumSize(new java.awt.Dimension(400, 32));
        ButtonPanel.setMinimumSize(new java.awt.Dimension(400, 32));
        ButtonPanel.setPreferredSize(new java.awt.Dimension(400, 32));
        ButtonPanel.setLayout(new java.awt.GridBagLayout());

        jPanel3.setMaximumSize(new java.awt.Dimension(200, 50));
        jPanel3.setMinimumSize(new java.awt.Dimension(200, 50));
        jPanel3.setPreferredSize(new java.awt.Dimension(200, 50));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        ButtonPanel.add(jPanel3, gridBagConstraints);

        Cancel.setText("Close");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });
        ButtonPanel.add(Cancel, new java.awt.GridBagConstraints());

        Calculate.setText("Calculate");
        Calculate.setEnabled(false);
        Calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateActionPerformed(evt);
            }
        });
        ButtonPanel.add(Calculate, new java.awt.GridBagConstraints());

        getContentPane().add(ButtonPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_CancelActionPerformed

    private void CalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculateActionPerformed
        notifyMathListeners();
    }//GEN-LAST:event_CalculateActionPerformed

    private void saveStrategyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveStrategyActionPerformed
         new Thread(() -> {
            try {
                saveGatingStrategy();
            } catch (Exception e) {

            }
        }).start();
    }//GEN-LAST:event_saveStrategyActionPerformed

    private void LoadStrategyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadStrategyActionPerformed
    new Thread(() -> {
            try {
        openGatingStrategy();
        } catch (Exception e) {

            }
        }).start();
    }//GEN-LAST:event_LoadStrategyActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(GatingHierarchy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(GatingHierarchy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(GatingHierarchy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GatingHierarchy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new GatingHierarchy().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonPanel;
    private javax.swing.JButton Calculate;
    private javax.swing.JButton Cancel;
    private javax.swing.JTable GateMathTable;
    private javax.swing.JButton LoadStrategy;
    private javax.swing.JPanel classPanel;
    private javax.swing.JSpinner classSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JButton saveStrategy;
    // End of variables declaration//GEN-END:variables

    private void updateTable(ArrayList<PolygonGate> gates) {
        
        if(this.importing){
            
        }else{

        RoiManager r = RoiManager.getInstance();
        int imageRoiCount = 0;

        if (!(r == null) && r.getCount() > 0) {
            imageRoiCount = r.getCount();
        }

        String[] availableGate = new String[gates.size() + imageRoiCount + 1];

        for (int i = 0; i < gates.size(); i++) {

            PolygonGate gate = gates.get(i);
            availableGate[i] = "GATE-" + gate.getName();

        }

        if (!(r == null) && r.getCount() > 0) {
            Roi[] rois = r.getRoisAsArray();
            for (int i = gates.size(); i < r.getCount() + gates.size(); i++) {
                availableGate[i] = "ROI-" + rois[i - gates.size()].getName();
            }

        }
        availableGate[availableGate.length - 1] = "";

        String[] availOperations = new String[GATEMATHOPTIONS.length + 1];

        for (int i = 0; i < GATEMATHOPTIONS.length; i++) {

            availOperations[i] = GATEMATHOPTIONS[i];

        }

        availOperations[availOperations.length - 1] = "";

        GateMathTable = new JTable();
        GateMathTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {null, null},
                    {null, null},
                    {null, null},
                    {null, null},
                    {null, null},
                    {null, null},
                    {null, null},
                    {null, null},
                    {null, null},
                    {null, null}
                },
                new String[]{
                    "Gate or ROI",
                    "Operation"

                }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                true, true
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (rowIndex < GateMathTable.getModel().getRowCount() - 1
                        && rowIndex > 0) {
                    if (columnIndex == 0
                            && !((GateMathTable.getModel().getValueAt(rowIndex - 1, 0)) == null)
                            && !((GateMathTable.getModel().getValueAt(rowIndex - 1, 1)) == null)) {
                        return true;
                    }
                    if (columnIndex == 1
                            && !((GateMathTable.getModel().getValueAt(rowIndex, 0)) == null)) {
                        return true;
                    }
                }
                if (rowIndex == 0 && columnIndex == 0) {
                    return true;
                }
                if (rowIndex == 0 && columnIndex == 1
                        && !((GateMathTable.getModel().getValueAt(rowIndex, 0)) == null)) {
                    return true;
                }

                if (columnIndex == 1 && GateMathTable.getModel().getRowCount() == rowIndex) {
                    return false;
                }
                return false;
            }
        });

        GateMathTable.getModel().addTableModelListener(this);

        GateMathTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        GateMathTable.setMaximumSize(new java.awt.Dimension(370, 300));
        GateMathTable.setMinimumSize(new java.awt.Dimension(370, 300));
        GateMathTable.setPreferredSize(new java.awt.Dimension(370, 300));
        GateMathTable.setShowGrid(true);

        

        TableColumn column = null;
        column = GateMathTable.getColumnModel().getColumn(1);
        column.setCellEditor(new DefaultCellEditor(new JComboBox(availOperations)));
        column.setPreferredWidth(100);
        column = GateMathTable.getColumnModel().getColumn(0);
        column.setCellEditor(new DefaultCellEditor(new JComboBox(availableGate)));
        column.setPreferredWidth(270);

        GateMathTable.doLayout();
        GateMathTable.repaint();

        jScrollPane.setViewportView(GateMathTable);
        }
    }

    @Override
    public void tableChanged(TableModelEvent e) {

        this.gateNames = new ArrayList<String>();
        this.opNames = new ArrayList<String>();

        if (!(GateMathTable.getModel().getValueAt(0, 0) == null)) {
            for (int row = 0; row < GateMathTable.getModel().getRowCount(); row++) {

                if (!(GateMathTable.getModel().getValueAt(row, 0) == null)
                        && !((String) GateMathTable.getModel().getValueAt(row, 0)).isEmpty()) {
                    gateNames.add((String) GateMathTable.getModel().getValueAt(row, 0));
                }
                if (!(GateMathTable.getModel().getValueAt(row, 1) == null)
                        && !((String) GateMathTable.getModel().getValueAt(row, 1)).isEmpty()) {
                    opNames.add((String) GateMathTable.getModel().getValueAt(row, 1));
                }
            }
        }
        if (gateNames.size() - opNames.size() == 1 && gateNames.size() > 1) {
            this.Calculate.setEnabled(true);
            this.saveStrategy.setEnabled(true);
        } else {
            this.Calculate.setEnabled(false);
            this.saveStrategy.setEnabled(false);
        }
    }

    public void addMathListener(AddClassByMathListener listener) {
        MathListeners.add(listener);
    }

    public void notifyMathListeners() {
        for (AddClassByMathListener listener : MathListeners) {
            //System.out.println("PROFILING: starting math for class " + (int)classSpinner.getValue());
            listener.addClassByMath(gateNames, opNames, (int) classSpinner.getValue());
        }
    }
    
    private void setTableValues(String[] gates, String[] operations){
        importing = true;
                GateMathTable.selectAll();
                GateMathTable.clearSelection();
        for(int i = 0; i < gates.length; i++){
            GateMathTable.setValueAt((String)gates[i], i, 0);
        }
        for(int j = 0; j < operations.length; j++){
            if(j == operations.length-1){
                importing = false;
            }
            GateMathTable.setValueAt((String)operations[j], j, 1);
        }  
    }
    
    private void openGatingStrategy(){
        ArrayList<ArrayList<String>> strategy = new ArrayList<>();
        
        ImportStrategy is = new ImportStrategy();
        
        String[] a1 = new String[strategy.get(0).size()];
        String[] a2 = new String[strategy.get(1).size()];
        
        strategy = is.importStrategy();
        
        setTableValues(strategy.get(0).toArray(a1), 
                       strategy.get(1).toArray(a2));
        
        
     
    }
    
    
    private void saveGatingStrategy(){
        ArrayList<ArrayList<String>> result = new ArrayList<>();
        result.add(new ArrayList(gateNames));
        result.add(new ArrayList(opNames));
        
        ExportStrategy es = new ExportStrategy();
        es.export(result);

    }
    
    class ExportStrategy {

        public ExportStrategy() {
        }

        public void export(ArrayList<ArrayList<String>> al) {
            File file;
            int returnVal = JFileChooser.CANCEL_OPTION;
            int choice = JOptionPane.OK_OPTION;
            do {
                JFileChooser jf = new JFileChooser(_vtea.LASTDIRECTORY);
                returnVal = jf.showSaveDialog(jScrollPane);
                file = jf.getSelectedFile();

                _vtea.LASTDIRECTORY = file.getPath();

                file = jf.getSelectedFile();

                if (FilenameUtils.getExtension(file.getName()).equalsIgnoreCase("vts")) {

                } else {
                    file = new File(file.toString() + ".vts");
                }

                if (file.exists()) {
                    String message = String.format("%s already exists\nOverwrite it?",
                            file.getName());
                    choice = JOptionPane.showConfirmDialog(jScrollPane, message,
                            "Overwrite File", JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.WARNING_MESSAGE);
                }
            } while (choice != JOptionPane.OK_OPTION);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    try {
                        FileOutputStream fos = new FileOutputStream(file);
                        ObjectOutputStream oos = new ObjectOutputStream(fos);
                        oos.writeObject(al);
                        oos.close();
                    } catch (IOException e) {
                        System.out.println("ERROR: Could not save the file" + e);
                    }
                } catch (NullPointerException ne) {
                    System.out.println("ERROR: NPE in Strategy Export");
                }
            } else {
            }
        }

    }
    
    class ImportStrategy {

        public ImportStrategy() {
        }

        protected ArrayList<ArrayList<String>>  importStrategy() {

            JFileChooser jf = new JFileChooser(_vtea.LASTDIRECTORY);
            int returnVal = jf.showOpenDialog(jScrollPane);
            File file = jf.getSelectedFile();

            ArrayList<ArrayList<String>> result = new ArrayList();

            Object obj = new Object();

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    try {
                        FileInputStream fis = new FileInputStream(file);
                        ObjectInputStream ois = new ObjectInputStream(fis);
                        result = (ArrayList) ois.readObject();
                        ois.close();
                        _vtea.LASTDIRECTORY = file.getAbsolutePath();
                    } catch (IOException e) {
                        System.out.println("ERROR: Could not open the file.");
                        System.out.println(e.getMessage());
                    }
                } catch (ClassNotFoundException ne) {
                    System.out.println("ERROR: Not Found in Gate Export");
                }
            } else {
            }
            return result;
        }

    }


    
    
}
